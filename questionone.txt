write the followong program in anonymous and IIFE?

// print odd numbers using anonymous function?
const printOddNumbers = (arr) => {
    arr.forEach ((num) =>{
        if(num%2 !== 0){
            console.log(num)
        }
    })
}

//IIFE code to print odd numbers
(function(arr){
    arr.forEach((num)=>{
        if(num % 2 !==0){
            console.log(num)
        }
    })
})([1, 2, 3, 4, 5])

//b. Convert all string to title caps in anonymous function
const stringToTitleCaps = (arr) => {
    return arr.map((str) => {
        return str.charAt(0).toUpperCase() + str.slice(1).toLowerCase()
    })
}

//IIFE code for string to title caps
(function(arr){
    const stringToTitleCaps = arr.map((str) => {
        return str.charAt(0).toUpperCase() + str.slice(1).toLowerCase()
    })
    console.log(stringToTitleCaps)
})(["hello", "world", "javascript"])

//c. sum of all array in anonymous function
const sumArray = (arr) => {
    return arr.reduce((acc, num) => acc + num, 0)
}

//IIFE for sum of all array
(function(arr){
    const sum = arr.reduce((acc , num) => acc + num, 0)
    console.log(sum)
})([1, 2, 3, 4, 5])

//d. print prime numbers in anonymous function
const getPrimes  = (arr) => {
    const isPrime = (num) => {
        for(let i=0; i<num; i++){
            if(num % i === 0){
                return false;
            }
        }
        return num > 1
    }
    return arr.filter((num) => isPrime(num))
}

//IIFE for findinf prime numbers
(function(arr){
    const isPrime = (num) => {
        for(let i = 0; i<num; i++){
            if(num % i === 0){
                return false
            }
        }
        return num >1
    }
    const primes = arr.filter((num) => isPrime(num))
})([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

e. return all the palindromes in array in anonymous function
const Palindrome = (arr) => {
    return arr.filter((word)=> {
        const reversed = word.split('').reverse().join('')
        return word === reversed
    })
}

//for IIFE
(function(arr) => {
    const palindromes = arr.filter((word) => {
        const reversed = word.split('').reverse().joim('');
        return word === reversed
    })
    console.log(palindrome)
})(['level', 'radar', 'world', 'madam'])

f.Using anonymous function
const findMedianSortedArrays = (nums1, nums2) => {
  const merged = [...nums1, ...nums2].sort((a, b) => a - b);
  const length = merged.length;
  const mid = Math.floor(length / 2);
  
  if (length % 2 === 0) {
    return (merged[mid - 1] + merged[mid]) / 2;
  } else {
    return merged[mid];
  }
};

// IIFE for finding median of two sorted arrays
(function(nums1, nums2) {
  const merged = [...nums1, ...nums2].sort((a, b) => a - b);
  const length = merged.length;
  const mid = Math.floor(length / 2);
  
  if (length % 2 === 0) {
    console.log((merged[mid - 1] + merged[mid]) / 2);
  } else {
    console.log(merged[mid]);
  }
})([1, 3, 5], [2, 4, 6]);

//g.  Using anonymous function remove duplicates from an array
const removeDuplicates = (arr) => {
  return arr.filter((value, index) => arr.indexOf(value) === index);
};

// IIFE for removing duplicates from an array
(function(arr) {
  const uniqueArray = arr.filter((value, index) => arr.indexOf(value) === index);
  console.log(uniqueArray);
})([1, 2, 2, 3, 4, 4, 5]);

h. rotate an array by k times
// Using anonymous function
const rotateArray = (arr, k) => {
  const n = arr.length;
  const rotations = k % n;
  const rotated = [...arr.slice(rotations), ...arr.slice(0, rotations)];
  return rotated;
};

// IIFE for rotating an array by k times
(function(arr, k) {
  const n = arr.length;
  const rotations = k % n;
  const rotated = [...arr.slice(rotations), ...arr.slice(0, rotations)];
  console.log(rotated);
})([1, 2, 3, 4, 5], 3);
